name: Deploy To EC2

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 만들기
        run: |
          mkdir ./src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t dotoread .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag dotoread ${{ steps.login-ecr.outputs.registry }}/dotoread:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/dotoread:latest

      - name: 배포 파일 압축
        run: tar -czvf $GITHUB_SHA.tar.gz appspec.yml scripts docker-compose.yml

      - name: S3에 배포 파일 업로드
        run: aws s3 cp $GITHUB_SHA.tar.gz s3://dotoread/$GITHUB_SHA.tar.gz

      - name: CodeDeploy로 배포 실행
        run: |
          aws deploy create-deployment \
            --application-name dotoread \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name Production \
            --s3-location bucket=dotoread,key=$GITHUB_SHA.tar.gz,bundleType=tgz